# This workflow will deploy source code on Cloud Run when a commit is pushed to the $default-branch branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Cloud Build          cloudbuild.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Cloud Build
#      roles/cloudbuild.builds.editor
#
#    Cloud Storage
#      roles/storage.admin
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the SERVICE and REGION environment variables (below).
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run runtime service account   - https://cloud.google.com/run/docs/securing/service-identity
#   Cloud Run IAM permissions           - https://cloud.google.com/run/docs/deploying-source-code#permissions_required_to_deploy
#   Cloud Run builds from source        - https://cloud.google.com/run/docs/deploying-source-code
#   Principle of least privilege        - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: Deploy to Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch:
  
env:
  PROJECT_ID: ${{vars.PROJECT_ID }}
  SERVICE: ${{ vars.SERVICE }}
  REGION: ${{ vars.REGION }}

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'

      # NOTE: Alternative option - authentication via credentials json
      # - name: Google Auth
      #   id: auth
      #   uses: 'google-github-actions/auth@v2'
      #   with:
      #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          # NOTE: If required, update to the appropriate source folder
          source: ./
          tag: latest
          flags: >-
              --add-volume name=issuer-keys,type=cloud-storage,bucket=${{ vars.ISSUER_KEYS_BUCKET }} 
              --add-volume-mount volume=issuer-keys,mount-path=/etc/eudiw/pid-issuer/privKey 
              --add-volume name=trusted-ca,type=cloud-storage,bucket=${{ vars.TRUSTED_CA_BUCKET }} 
              --add-volume-mount volume=trusted-ca,mount-path=/etc/eudiw/pid-issuer/cert  
              --port 5000
          secrets_update_strategy: overwrite
          secrets: |-
            FLASK_SECRET=${{ secrets.ISSUER_FLASK_SECRET }}
            EIDASNODE_LIGHTTOKEN_SECRET=${{ secrets.EIDAS_LIGHT_TOKEN_SECRET }}
            REVOCATION_API_KEY=${{ secrets.REVOCATION_API_KEY_SECRET }}
          env_vars_update_strategy: overwrite
          env_vars: |-
            USE_GCP_LOGGER=1
            USE_FILE_LOGGER=0
            EIDAS_NODE_URL=${{ vars.EIDAS_NODE_URL }}
            DYNAMIC_PRESENTATION_URL=${{ vars.DYNAMIC_PRESENTATION_URL }}
            SERVICE_URL=${{ vars.SERVICE_URL }}
            ENABLED_COUNTRIES='${{ vars.ENABLED_COUNTRIES }}'
            PID_ISSUING_AUTHORITY= ${{ vars.PID_ISSUING_AUTHORITY }}
            PID_ORG_ID=${{ vars.PID_ORG_ID}}
            MDL_ISSUING_AUTHORITY=${{ vars.MDL_ISSUING_AUTHORITY }}
            QEAA_ISSUING_AUTHORITY=${{ vars.QEAA_ISSUING_AUTHORITY }}

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}

      - name: Discord notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          content: "deployment status: ${{ job.status }}"
          title: "deploy"
          description: "Issuer deployment complete"
          color: 0x0000ff
          url: "https://github.com/noxxious/eudi-srv-web-issuing-eudiw-py"
          username: Issuer deploy
      